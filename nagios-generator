#!/usr/bin/python

"""nagios-generator

Reads in a pseudo-configuration script and writes out Nagios
configuration files based on that content.  This makes generating
configurations much easier and less error prone.  It also saves a little
sanity, which is something that we -operations people always need.

This script originally from Mark's Nagios Generator:
    https://github.com/xb95/nagios-generator

Copyright (c) 2011 by Bump Technologies, Inc, and authors and
contributors. Please see the above linked repository for licensing
information.

"""

import datetime
import os
import re
import sys
from argparse import ArgumentParser

def main(argv):
    """Main generator for Nagios configurations."""
    parser = ArgumentParser(description="Creates Nagios configuration files.")
    parser.add_argument(
        "-d",
        "--dest-file",
        dest="ofile",
        metavar="FILE",
        default="/etc/nagios3/conf.d/auto",
        help="File to write the the generated output to.",
    )
    parser.add_argument(
        "-c",
        "--config-file",
        dest="conf",
        metavar="FILE",
        default="/etc/nagios3/auto/default.cfg",
        help="The file to use as input to the config generator.",
    )
    parser.add_argument(
        "-s",
        "--sources-file",
        dest="source",
        metavar="FILE",
        default="/etc/nagios3/auto/sources.cfg",
        help="The file that contains the sources referenced in the config file.",
    )

    options, unknown = parser.parse_known_args()
    options.conf = "example.conf"
    options.source = "sources.conf"
    if not os.path.isfile(options.conf):
        parser.error(f"Configuration file not found: {options.conf}")
    if not os.path.isfile(options.source):
        parser.error(f"Source file not found: {options.source}")

    src = parse_sources(options.source)
    if src is None:
        parser.error("Failed parsing source file. Please check the formatting.")
    
    conf = parse_config(options.conf, src)
    if conf is None:
        parser.error("Failed parsing configuration file. Please check the formatting.")

    write_output_file(src, conf, options.ofile)


def fatal(msg):
    """Fatal error.  Print a message and then bail with an error code."""
    print(msg)
    sys.exit(1)


def parse_sources(src):
    """Given a filename, parse it as the sources.  We use this file to tell us what
    Nagios stanzas to use when they are referenced.  The sources file needs to
    consist of the following format:

    $redis
    define service {
        host                 $1
        service_description  $2
    }

    $riak
    define service {
        host                 $1
        other stuff          $2
    }

    """
    try:
        with open(src, "r", encoding="utf-8") as source_file:
            lines = source_file.readlines()
    except IOError:
        return None

    current_source = None
    sources = {}

    for line in lines:
        line = line.rstrip()
        if line.startswith("$"):
            current_source = line[1:]
            if current_source not in sources:
                sources[current_source] = ""
            continue
        if current_source is None:
            continue
        sources[current_source] += line + "\n"
    return sources


def parse_config(conf, sources):
    """Parse the given configuration file.  This is a very simple format that specifies
    what hosts to monitor and which sources to assign to each host.  The configuration
    file format is like this:

    @group $thing1, $thing2

    host @group, $thing3
    host $thing3 arg arg arg

    See the example configuration files.

    """
    try:
        with open(conf, "r", encoding="utf-8") as config_file:
            lines = config_file.readlines()
    except IOError:
        return None

    groups = {}
    hosts = {}
    has_error = False

    for line in lines:
        line = line.strip()
        if len(line) <= 0 or line.startswith("#"):
            continue
        if line.startswith("@"):
            group, command = line[1:].split(" ", 1)
            contents = [i.strip() for i in command.split(",")]
            if group not in groups:
                groups[group] = {}

            # Validate that this item exists as a source.
            for source_line in contents:
                source, args = parse_source_line(source_line)
                if source in sources:
                    groups[group][source] = args
                    continue
                has_error = True
                print(f"Error with group {group}, source {source}.")
        
        else:  # Regular host.
            hostname, command = line.split(" ", 1)
            if hostname not in hosts:
                hosts[hostname] = []
            contents = [i.strip() for i in command.split(",")]

            # Now validate the sources and put them on the host.
            for source_line in contents:
                if source_line.startswith("@"):
                    group = source_line[1:]
                    if group not in groups:
                        print(f"Group {group} not found for host {hostname}.")
                        has_error = True
                        continue
                    for source in groups[group]:
                        hosts[hostname].append(
                            (source, [hostname] + groups[group][source])
                        )
                    continue
                source, args = parse_source_line(source_line)

                if source in sources:
                    hosts[hostname].append((source, [hostname] + args))
                    continue
                has_error = True
                print(f"Error with host {hostname}, source {source}.")

    # If any error, we don't want to actually continue and do anything.
    return None if has_error else hosts


def parse_source_line(source_line):
    """Given a source line like '$redis arg1 'arg2 is a string' arg3', parse it
    and return the source name and the arguments in a list.  We only support
    double quotes and spaces.  No tabs or single quotes.

    """
    quoted = False
    spaced = True
    args = []

    for char in source_line:
        if char == '"':
            if spaced and not quoted:
                args.append("")
            quoted = not quoted
            spaced = False
        elif char == " ":
            if quoted:
                args[-1] += char
                continue
            spaced = True
        else:
            if spaced:
                args.append("")
            args[-1] += char
            spaced = False

    if not args[0].startswith("$"):
        print(f"Source configuration [{source_line}] invalid.")
        return None, None
    return args[0][1:], args[1:]


def write_output_file(src, conf, ofile):
    """Write stuff. We actually write everything to one large automatic file."""
    try:
        with open(ofile, "w", encoding="utf-8") as output:
            output.write(
                f"# automatically generated by gen-nagios-conf at {str(datetime.datetime.now())}\n"
            )
            output.write("# DO NOT EDIT THIS MANUALLY, YOUR CHANGES WILL BE LOST\n\n")

            for hostname in sorted(conf):
                for pair in conf[hostname]:
                    source, args = pair
                    text = src[source]
                    for i in range(0, len(args)):
                        text = re.sub(r"\$%d" % (i + 1), args[i], text)
                    output.write(text + "\n")

    except IOError:
        fatal("Failed to open output file.")

if __name__ == "__main__":
    sys.exit(main(sys.argv))
